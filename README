This code is a rewriting of the matlab code from "Remarks around 50 lines of Matlab: short finite element implementation"

http://link.springer.com/article/10.1023/A:1019155918070
https://www.math.hu-berlin.de/~cc/cc_homepage/download/1999-AJ_CC_FS-50_Lines_of_Matlab.pdf

in the julia language. For the matlab version, see

https://github.com/cpraveen/fem50

--------------------------------------------------------------------------------
TODO
--------------------------------------------------------------------------------
Complete assembly for quadrilaterals
Add plotting solution for quadrilaterals

--------------------------------------------------------------------------------
How to run example in "square"
--------------------------------------------------------------------------------

bash> cd square

Generate mesh by running square.m in matlab (julia version not completed)
matlab> square(20)
matlab> quit

Run the fem code

bash> julia run.jl

--------------------------------------------------------------------------------
Constructing sparse matrix
--------------------------------------------------------------------------------
The simplest way to initialize an empty nxn sparse matrix is

julia> A = spzeros(n,n)

This makes use of 64 byte integers and floats. For small problem sizes, 32 byte integers are enough for indexing, in which case you can do

julia> A = sparse(Int32[], Int32[], Float64[], n, n)
